{
  "title": "install.json",
  "type": "object",
  "definitions": {
    "src": {
      "type": "string",
      "title": "https://github.com/Undergroundsy/mailin-work-order-bigcommerce/install.json",
      "author": "Undergroundsy Development"
      "description": "specific to set big comm store id"
    },
    "resource": {
      "properties": {
        "type": {
          "type": "string",
          "title": "includes.html",
          "enum": ["script", "style"]
        },
      "default": {
        "type": "script",
        "src": "script.js"
      }
    },
          "units": {
            "title": "Declare which units the installer can choose. Used with {\"type\": \"object\", \"format\": \"number\"}",
            "description": "Presented as a floating-point number input and unit selector. This is useful when a customer has to set a specific size on an element.",
            "type": "array",
            "default": ["px", "em", "%"],
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "title": "Declares the type this option will use in your app's INSTALL_OPTIONS constant.",
            "default": "string",
            "enum": [
              "array",
              "boolean",
              "help",
              "hidden",
              "integer",
              "number",
              "object",
              "string"
            ]
          },
          "format": {
            "type": "string",
            "title": "The format your input will appear as in the install form.",
            "enum": [
              "account",
              "code",
              "color",
              "date-time",
              "date",
              "element",
              "email",
              "image",
              "number",
              "page",
              "radios",
              "richtext",
              "selector",
              "slider",
              "textarea",
              "time",
              "url"
            ]
          },
          "add": {
            "type": "object",
            "title": "Add item button declaration",
            "properties": {
              "description": {
                "title": "Modal description"
              },
              "properties": {
                "$ref": "#/definitions/optionDeclarationCommonProperties"
              },
              "buttonLabel": {
                "type": "string",
                "title": "Button label"
              }
            }
          },
          "items": {
            "title": "Declarations for each item in an array.",
            "type": "object",
            "description": "Used with {\"type\": \"array\"}. Must have \"properties\" key.",
            "default": {
              "type": "object",
              "properties": {}
            },
            "properties": {
              "properties": {
                "$ref": "#/definitions/optionDeclarationCommonProperties"
              }
            }
          }
        }
      }
    },
    "optionDeclaration": {
      "$ref": "#/definitions/optionDeclarationCommonProperties"
    }
  },
  "properties": {
    "resources": {
      "title": "Files included in your app to be inserted onto HTML pages.",
      "description": "Each resource should be unminified and human-readable.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "head": {
          "title": "JavaScript and CSS files included in the <head> of a site.",
          "description": "<head> resources block the page from rendering while your code executes.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/resource"
          }
        },
        "body": {
          "title": "JavaScript and CSS files included in the <body> of the site.",
          "description": "<body> resources load and execute asynchronously. This is useful if your code should allow the page to render first.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/resource"
          }
        },
        "preview": {
          "title": "(Alpha) JavaScript files executed in the install preview.",
          "description": "Preview resources can be used for local hook events, allowing your app to modify the install record e.g. fetching an API key with an OAuth token, then storing the key on an option.",
          "type": "array",
          "minItems": 1,
          "items": {
            "additionalProperties": false,
            "properties": {
              "src": {
                "$ref": "#/definitions/src"
              }
            }
          }
        }
      }
    },
    "preview": {
      "title": "Configuration of the installer preview experience.",
      "description": "Preview options can be used to declare handlers that execute after an event has been triggered.",
      "default": {
        "handlers": [
          {
            "options": ["_default"],
            "execute": "INSTALL_SCOPE.setOptions(INSTALL_OPTIONS)"
          }
        ]
      },
      "properties": {
        "handlers": {
          "type": "array",
          "title": "Declarations for each group of matching options and their executing function. Multiple update handlers are useful when an app has options that have different updating procedures.",
          "items": {
            "properties": {
              "options": {
                "type": "array",
                "title": "The options section is an array of property keys which this handler should apply to. When any of those options are changed during a preview, this handler will be triggered. A given property may have multiple handlers.\nOptions can also be handled using special keys:\n\"_default\": Trigger when any property that hasn't yet been handled by a more specific entry changes.\n\"_any\": Trigger when any property changes, regardless of any other entry.\n\"_product\": Trigger when the customer changes their chosen product.",
                "items": {
                  "type": "string"
                }
              },
              "execute": {
                "type": "string",
                "title": "A function to execute when a matching option has changed. This function should be defined in your app's JavaScript. e.g.\n\twindow.INSTALL_SCOPE = { updateOptions (nextOptions) { } }",
                "default": "INSTALL_SCOPE.updateOptions(INSTALL_OPTIONS)"
              }
            }
          }
        },
        "hide": {
          "type": "boolean",
          "title": "Hide the preview pane.",
          "default": true,
          "description": "Some apps don't add anything visually to the site they're being installed upon. Showing a preview when nothing visually on the site has changed can be confusing to the customer, leading them to think your app is broken.\nOften it still makes sense to embed a message on the previewed page to explain to the customer what is being installed and how it works. For example, if you are building an analytics tool you could take the customer through a tour of the types of things which would be measured.\nIf you can't find such an opportunity however, you can disable the preview to prevent any confusion."
        }
      }
    },
    "hooks": {
      "type": "array",
      "title": "Hook declarations",
      "description": "2way app process as a backend server on big comm"
      "items": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "title": "URL to a server handling the POST request triggered from the event.",
            "default": "https://"
          },
          "block": {
            "type": "boolean",
            "title": "Show a loading indicator until your response has been loaded. Your changes **will** be ignored if you do not set this property.",
            "description": "Unlike most other WebHook implementations, Cloudflare hooks allow you to modify the elements you are being notified about. For example, you might choose to show a new option when the customer has selected a specific entry in one of your option's dropdowns. You may also wish to use the hooks feature to support OAuth-based login in your app."
          },
          "events": {
            "type": "array",
            "title": "Event names that trigger a hook event.",
            "items": {
              "type": "string",
              "title": "Event name."
            }
          },
          "authenticate": {
            "type": "array",
            "title": "Matching option keys of OAuth account fields.",
            "description": "This option should contain:\n\t{\"type\": \"object\", \"format\": \"account\"}",
            "items": {
              "type": "string",
              "title": "A string matching another defined option key."
            }
          }
        }
      }
    },
    "dns": {
      "type": "array",
      "title": "DNS Record declarations",
      "description": "Cloudflare DNS record to be created upon installing a Cloudflare App. Note all other records previously created by the app on the site will be removed. Following the Cloudflare API https://api.cloudflare.com/#dns-records-for-a-zone-create-dns-record.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name of the DNS Record.",
            "description": "For example sub for sub.example.com max length: 255"
          },
          "content": {
            "type": "string",
            "title": "Content of the DNS record.",
            "description": "Varies depending on the record type.",
            "examples": ["198.51.100.4", "IN LOC 37 46 46 N 122 23 35 W 0m 100m 0m 0m"]
          },
          "type": {
            "type": "string",
            "title": "Type of the DNS Record",
            "description": "valid values: A, AAAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI"
          },
          "proxied": {
            "type": "boolean",
            "title": "Event names that trigger a hook event.",
            "description": "Whether the record is receiving the performance and security benefits of Cloudflare.",
            "default": false
          },
          "priority": {
            "type": "number",
            "title": "Priority",
            "description": "Used with some records like MX and SRV to determine priority."
          },
          "ttl": {
            "type": "number",
            "title": "Matching option keys of OAuth account fields.",
            "description": "Time to live for DNS record.",
            "default": "1"
          },
          "data": {
            "type": "object",
            "description": "Metadata about the record."
          }
        }
      }
    },
    "workers": {
      "type": "array",
      "description": "Cloudflare workers declarations to be installed through an app onto a site.",
      "title": "Cloudflare Workers",
      "items": {
        "type": "object",
        "properties": {
          "src": {
            "$ref": "#/definitions/src"
          }
        }
      }
    },
    "options": {
      "title": "A parent object containing your app's install options.",
      "description": "Must contain a \"properties\" object.",
      "type": "object",
      "required": ["properties"],
      "properties": {
        "properties": {
          "$ref": "#/definitions/optionDeclaration"
        }
      }
    }
  }
  "resources": {
    "body": [
      {
        "type": "style",
        "src": "./build/styles.css"
      },
      {
        "type": "script",
        "src": "./build/index.js"
      }
    ]
  },
  "dns": [
    {
      "type": "TXT",
      "content": "Managed TXT Record",
      "name": "360mailinrepair.com",
      "ttl": 
    }
  ],
  "preview": {
    "handlers": [
      {
        "options": ["_default"],
        "execute": "INSTALL_SCOPE.setOptions(INSTALL_OPTIONS)"
      }
    ]
  },
  "options": {
    "properties": {
      "location": {
        "title": "Message Location",
        "description": "Where should the message appear?",
        "order": 0,
        "type": "object",
        "format": "element",
        "default": {
          "selector": "body",
          "method": "prepend"
        }
      },
      "message": {
        "title": "Message",
        "description": "A short example message.",
        "type": "string",
        "format": "richtext",
        "order": 1,
        "default": "<p>myapp</p>"
      }
    }
  }
}
